h1. Making Modules

h2. First Module

* Info file @demo.info@
* Module file @demo.module@

    name = demo
    description = Just a simple demo module
    core = 7.x

    // Hooking in to nodeapi
    function demo_nodeapi(&$node, $op_) {
      global $user;
      if ($op == 'view') {
        if ($node->uid == $user->uid {
          $node->title . ' [YOUR ARTICLE]';
        }
      }
    }

* Anytime someone says hook_something you replace hook with your module name
* You might also involve an install file
** Where you hold logic that only runs during install or update

    function tricky_install() {
      drupal_set_message('You just installed Tricky!');
    }

h2. Routing a Request

* The @.htaccess@ file routes all requests through @index.php@
** @index.php@ send the request through a bootstrap process and then looks for a @menu.inc@
* Your module can implement @menu@ and then provide urls
** @function mymodule_menu()@
** @return "Some text!"@ would just render some text to the screen
* Based on the request from the browser and what Drupal found it generates the best match
** Is @welcome.html@ an alias?
** Is it a path?
** Essentially use hook_menu to map paths to functions
** The @menu@ system is the router

h2. Hook System

* The hook system is an event listener pattern that utilizes specially named functions
* Create hooks with @module_invoke_all('foo')@
** Ask all modules if they implement @foo@ and then invoke it
** @yourmodule_foo()@ would use it
** Namespace your hook with you module name to prevent collisions
